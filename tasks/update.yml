---
- name: "Adapting to Puppet version"
  shell: "puppet --version|cut -c1"
  register: puppet_majorversion

- name: "Applying Puppet manifest for namespace {{ openio_namespace }}"
  command: "{{ openio_puppet4_apply if ( puppet_majorversion == '4' ) else openio_puppet3_apply }} \
            {{ openio_puppet_manifest }}/{{ openio_namespace|lower }}.pp"
  register: puppet_result
  changed_when: puppet_result.rc == 2

- name: "Restart conscience agent to update service list"
  shell: "gridinit_cmd restart $({{openio_gridinit_cmd}} status | \
          grep {{openio_namespace}} | grep conscienceagent | awk '{ print $1 }')"

# FIXME: Currently there isn't any way to check that all services have registered
# in the conscience, so we wait
- name: "Wait to make sure  all services to be registered in the conscience"
  wait_for: timeout=10
  delegate_to: "{{ groups['openio_conscience'][0] }}"
  when: openio_bootstrap != 'True'

- name: "Store a list of services with locked scores which will have to be relocked after setup"
  shell: "{{ openio_cli_path }} cluster list --oio-ns={{ openio_namespace }} -f value | awk '{if($7==0) print $1,$2;}'"
  register: openio_locked
  when:
      - openio_bootstrap != 'True'
      - inventory_hostname == groups['openio_conscience'][0]

# TODO: Without an update in SDS to be able to assign on locked rawx, we need to unlock rawx scores for a moment
# in order to perform rdir assignment
# See https://github.com/open-io/oio-sds/issues/1337
- name: "Unlock scores for rawx/rdir"
  shell: "{{ openio_cli_path }} cluster unlockall --oio-ns={{ openio_namespace }} rawx rdir &&
          {{ openio_cli_path }} cluster wait      --oio-ns={{ openio_namespace }} rawx rdir"
  when: openio_bootstrap != 'True'

- name: "Update Reverse Directory assignment for namespace {{ openio_namespace }}"
  command: "{{ openio_cli_path }} --oio-ns={{ openio_namespace }} volume admin bootstrap"
  when:
      - openio_bootstrap != 'True'
      - inventory_hostname == groups['openio_conscience'][0]

- name: "Lock scores on previously unlocked services"
  shell: "{{ openio_cli_path }} cluster lock --oio-ns={{ openio_namespace }} {{ item }} -f yaml"
  with_items:
      - "{{ openio_locked.stdout_lines }}"
  when:
      - openio_bootstrap != 'True'
      - inventory_hostname == groups['openio_conscience'][0]
...
